<?php

namespace Modules\Hotel\Controllers;

use App\Http\Controllers\Controller;
use Modules\Hotel\Models\Hotel;
use Illuminate\Http\Request;
use Modules\Location\Models\Location;
use Modules\Location\Models\LocationCategory;
use Modules\Review\Models\Review;
use Modules\Core\Models\Attributes;
use DB;
use App\Models\Module;
use Illuminate\Support\Facades\Cache;

class HotelController extends Controller
{
    protected $hotelClass;
    protected $locationClass;
    /**
     * @var string
     */
    private $locationCategoryClass;

    public function __construct(Hotel $hotel)
    {
        $this->hotelClass = $hotel;
        $this->locationClass = Location::class;
        $this->locationCategoryClass = LocationCategory::class;
    }
    public function callAction($method, $parameters)
    {
        if (!Hotel::isEnable()) {
            $message = Module::where('name', 'hotel')->first();
            if ($message) {
                $message = $message->translate();
            }
            $message = !is_null($message) ? $message : __('This section is currently disabled');


            return view('maintenance')->with('message', $message);
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request)
    {

        $layout = setting_item("hotel_layout_search", 'normal');
        $layout_item = setting_item("hotel_layout_item_search", 'grid');

        $limit = $request->query('limit', setting_item("hotel_page_limit_item") ?? 9);
        $is_ajax = $request->query('_ajax');
        $for_map = $request->query('_map', $layout === 'map');




        $originalQuery = $this->hotelClass->where('status', 'publish')->whereNotNull('location_id');

        $originalQuery->whereHas('location', function ($query) {
            $query->where('status', 'publish')
                ->whereHas('parent', function ($query) {
                    $query->where('status', 'publish');
                });
        });
        $AllHotelesQuery = $this->hotelClass->where('status', 'publish')->whereNotNull('location_id')
            ->whereHas('location', function ($query) {
                $query->where('status', 'publish')
                    ->whereHas('parent', function ($query) {
                        $query->where('status', 'publish');
                    });
            });

        $hotelIds = $AllHotelesQuery->pluck('id')->implode(',');

        $AllHotelesQuery = $this->hotelClass->whereIn('id', explode(',', $hotelIds));



        if ($request->has('service_name') && !empty($request->input('service_name'))) {
            $serviceName = trim($request->input('service_name'));

            $originalQuery->where('title', 'LIKE', "%{$serviceName}%");
            $AllHotelesQuery->where('title', 'LIKE', "%{$serviceName}%");
        }

        if ($request->has('location_id') && $request->location_id != null) {
            $locationId = intval($request->input('location_id'));

            $originalQuery->where('location_id', $locationId);
            $AllHotelesQuery->where('location_id', $locationId);
        }

        if ($request->has('star_rate')) {
            $starRates = $request->input('star_rate', []);
            $includeUnrated = in_array('unrated', $starRates);
            $numericStarRates = array_filter($starRates, 'is_numeric');

            $AllHotelesQuery = $originalQuery->clone();
            $AllHotelesQuery->where(function ($query) use ($numericStarRates, $includeUnrated) {
                if (!empty($numericStarRates)) {
                    $query->whereIn('star_rate', $numericStarRates);
                }
                if ($includeUnrated) {
                    $query->orWhereNull('star_rate');
                }
            });
        }

        if ($request->has('attrs')) {
            $filteredHotelIds = $AllHotelesQuery->pluck('id')->toArray();
            $requestedTerms = $request->input('attrs');

            $attributeRanges = [];
            $maxTermsPerAttribute = [];

            foreach ($requestedTerms as $attrId => $ranges) {
                $minValue = PHP_INT_MAX;
                $maxValue = PHP_INT_MIN;
                $hasRange = false;

                foreach ($ranges as $range) {
                    if (str_contains($range, ';')) {
                        $rangeValues = explode(';', $range);
                        if (count($rangeValues) === 2) {
                            $minValue = min($minValue, (int) $rangeValues[0]);
                            $maxValue = max($maxValue, (int) $rangeValues[1]);
                            $hasRange = true;
                        }
                    }
                }

                $maxTerm = DB::table('bravo_terms')
                    ->where('attr_id', $attrId)
                    ->orderByRaw('CAST(name AS UNSIGNED) DESC')
                    ->value('name');

                $maxTermsPerAttribute[$attrId] = $maxTerm ? (int) $maxTerm : 0;

                if ($hasRange) {
                    $attributeRanges[$attrId] = [$minValue, $maxValue];

                    $hotelIds = DB::table('bravo_hotel_term')
                        ->join('bravo_terms', 'bravo_terms.id', '=', 'bravo_hotel_term.term_id')
                        ->where('bravo_terms.attr_id', $attrId)
                        ->whereBetween('bravo_terms.name', [$minValue, $maxValue])
                        ->groupBy('bravo_hotel_term.target_id')
                        ->pluck('bravo_hotel_term.target_id')
                        ->toArray();

                    $validHotelIds = array_intersect($filteredHotelIds, $hotelIds);

                    $AllHotelesQuery->whereIn('id', $validHotelIds);
                }
            }
        }





        if ($request->has('attrs') || $request->has('review_score')) {
            $cacheKeyFiltersOrder = 'filters_order';
            $cachedFiltersOrder = Cache::get($cacheKeyFiltersOrder, []);

            $newFilters = [];


            if ($request->has('attrs') && is_array($request->input('attrs'))) {
                $newFilters['attrs'] = array_keys($request->input('attrs'));
            }

            if ($request->has('review_score') && is_array($request->input('review_score'))) {
                $newFilters['review_score'] = true;
            }

            foreach ($newFilters as $key => $value) {
                if (!in_array($key, $cachedFiltersOrder)) {
                    $cachedFiltersOrder[] = $key;
                }
            }

            Cache::put($cacheKeyFiltersOrder, $cachedFiltersOrder);

            $filteredHotelIds = $AllHotelesQuery->pluck('id')->toArray();
            $originalHotelIds = $originalQuery->pluck('id')->toArray();

            $sliderTermCounts = DB::table('bravo_hotel_term')
                ->join('bravo_hotels', 'bravo_hotels.id', '=', 'bravo_hotel_term.target_id')
                ->join('bravo_terms', 'bravo_terms.id', '=', 'bravo_hotel_term.term_id')
                ->join('bravo_attrs', 'bravo_attrs.id', '=', 'bravo_terms.attr_id')
                ->where('bravo_attrs.display_type', 'slider')
                ->whereIn('bravo_hotel_term.target_id', $originalHotelIds)
                ->where('bravo_hotels.status', 'publish')
                ->groupBy('bravo_hotel_term.term_id')
                ->select('bravo_hotel_term.term_id', DB::raw('COUNT(DISTINCT bravo_hotel_term.target_id) as hotel_count'))
                ->pluck('hotel_count', 'bravo_hotel_term.term_id');

            $nonSliderTermCounts  = DB::table('bravo_hotel_term')
                ->join('bravo_hotels', 'bravo_hotels.id', '=', 'bravo_hotel_term.target_id')
                ->join('bravo_terms', 'bravo_terms.id', '=', 'bravo_hotel_term.term_id')
                ->join('bravo_attrs', 'bravo_attrs.id', '=', 'bravo_terms.attr_id')
                ->where(function ($query) {
                    $query->whereNull('bravo_attrs.display_type')
                        ->orWhere('bravo_attrs.display_type', '!=', 'slider');
                })->whereIn('bravo_hotel_term.target_id', $filteredHotelIds)
                ->where('bravo_hotels.status', 'publish')
                ->groupBy('bravo_hotel_term.term_id')
                ->select('bravo_hotel_term.term_id', DB::raw('COUNT(DISTINCT bravo_hotel_term.target_id) as hotel_count'))
                ->pluck('hotel_count', 'bravo_hotel_term.term_id');



            $term_counts = collect($sliderTermCounts)->union($nonSliderTermCounts);
            $attributes = Attributes::where('service', 'hotel')
                ->orderBy('position', 'asc')
                ->with([
                    'terms' => function ($query) use ($filteredHotelIds) {
                        $query->whereHas('hotel', function ($q) use ($filteredHotelIds) {
                            $q->whereIn('bravo_hotels.id', $filteredHotelIds);
                        })
                            ->withCount(['hotel' => function ($q) use ($filteredHotelIds) {
                                $q->whereIn('bravo_hotels.id', $filteredHotelIds);
                            }])
                            ->orderBy('name', 'asc');
                    },
                    'translation'
                ])
                ->get();




            $HotelesQuery = $AllHotelesQuery->get();
            $reviewScoreCounts = collect([5 => 0, 4 => 0, 3 => 0, 2 => 0, 1 => 0]);
            foreach ($HotelesQuery as $hotel) {
                if (!empty($hotel->review_score)) {
                    $score = intval($hotel->review_score);
                    if ($reviewScoreCounts->has($score)) {
                        $reviewScoreCounts->put($score, $reviewScoreCounts->get($score) + 1);
                    }
                }
            }

            foreach ($cachedFiltersOrder as $filterType) {


                if ($filterType == 'attrs' && $request->has('attrs')) {
                    $requestedTerms = $request->input('attrs');

                    foreach (array_keys($requestedTerms) as $attrId) {
                        $attr = DB::table('bravo_attrs')
                            ->where('id', $attrId)
                            ->where('display_type', 'slider')
                            ->first();


                        foreach ($requestedTerms as $attrId => $terms) {

                            foreach ($terms as $termSlug) {
                                $termId = DB::table('bravo_terms')
                                    ->where('slug', $termSlug)
                                    ->value('id');
                                if (!$term_counts->has($termId)) {
                                    unset($requestedTerms[$attrId]);
                                    break;
                                }
                            }
                        }
                        $request->merge(['attrs' => $requestedTerms]);







                        $cacheKeyAttrsOrder = 'attrs_order';
                        $cachedAttrsOrder = Cache::get($cacheKeyAttrsOrder, []);

                        $selectedAttributes = array_keys($requestedTerms);

                        foreach ($selectedAttributes as $attrId) {
                            if (!in_array($attrId, $cachedAttrsOrder)) {
                                $cachedAttrsOrder[] = $attrId;
                            }
                        }

                        $cachedAttrsOrder = array_values(array_filter($cachedAttrsOrder, function ($attrId) use ($selectedAttributes) {
                            return in_array($attrId, $selectedAttributes);
                        }));
                        Cache::put($cacheKeyAttrsOrder, $cachedAttrsOrder);

                        $orderedAttrs = [];
                        foreach ($cachedAttrsOrder as $attrId) {
                            if (isset($requestedTerms[$attrId])) {
                                $orderedAttrs[$attrId] = $requestedTerms[$attrId];
                            }
                        }



                        $originalTerms = [];

                        foreach ($orderedAttrs as $attrId => $terms) {
                            $filteredHotelIds = $AllHotelesQuery->pluck('id')->toArray();

                            $filteredTermCounts = DB::table('bravo_hotel_term')
                                ->whereIn('target_id', $filteredHotelIds)
                                ->groupBy('term_id')
                                ->select('term_id', DB::raw('COUNT(DISTINCT target_id) as hotel_count'))
                                ->pluck('hotel_count', 'term_id');

                            foreach ($attributes as $attribute) {
                                if ($attribute->id == $attrId) {
                                    foreach ($attribute->terms as $term) {
                                        $originalTerms[$term->id] = $term->hotel_count;
                                        $term->hotel_count = $filteredTermCounts->get($term->id, 0);
                                    }
                                }
                            }


                            $termIds = DB::table('bravo_terms')
                                ->whereIn('slug', $terms)
                                ->where('attr_id', $attrId)
                                ->pluck('id')
                                ->toArray();

                            $hotelIds = DB::table('bravo_hotel_term')
                                ->whereIn('term_id', $termIds)
                                ->groupBy('target_id')
                                ->pluck('target_id')
                                ->toArray();

                            if (!empty($hotelIds)) {
                                $AllHotelesQuery->whereIn('id', $hotelIds);
                            }

                            $updatedHotelIds = $AllHotelesQuery->pluck('id')->toArray();

                            $updatedTermCounts = DB::table('bravo_hotel_term')
                                ->whereIn('target_id', $updatedHotelIds)
                                ->groupBy('term_id')
                                ->select('term_id', DB::raw('COUNT(DISTINCT target_id) as hotel_count'))
                                ->pluck('hotel_count', 'term_id');

                            foreach ($attributes as $attribute) {
                                if ($attribute->id != $attrId) {
                                    foreach ($attribute->terms as $term) {
                                        $term->hotel_count = $updatedTermCounts->get($term->id, 0);
                                    }
                                }
                            }
                        }

                        $filteredHotelIds = $AllHotelesQuery->pluck('id')->toArray();
                        $originalHotelIds = $originalQuery->pluck('id')->toArray();

                        $termCounts = DB::table('bravo_hotel_term')
                            ->join('bravo_hotels', 'bravo_hotels.id', '=', 'bravo_hotel_term.target_id')
                            ->join('bravo_terms', 'bravo_terms.id', '=', 'bravo_hotel_term.term_id')
                            ->whereIn('bravo_hotel_term.target_id', $filteredHotelIds)
                            ->where('bravo_hotels.status', 'publish')
                            ->whereNotIn('bravo_terms.attr_id', array_keys($orderedAttrs))
                            ->groupBy('bravo_hotel_term.term_id')
                            ->select('bravo_hotel_term.term_id', DB::raw('COUNT(DISTINCT bravo_hotel_term.target_id) as hotel_count'))
                            ->pluck('hotel_count', 'bravo_hotel_term.term_id');


                        $term_counts = collect($originalTerms)->union($termCounts);



                        $filteredHotelIds = $AllHotelesQuery->pluck('id')->toArray();
                        $HotelesQuery = $AllHotelesQuery->get();
                        $reviewScoreCounts = collect([5 => 0, 4 => 0, 3 => 0, 2 => 0, 1 => 0, 0 => 0]);

                        foreach ($HotelesQuery as $hotel) {
                            if (!empty($hotel->review_score)) {
                                $star = floor($hotel->review_score);
                                if ($reviewScoreCounts->has($star)) {
                                    $reviewScoreCounts->put($star, $reviewScoreCounts->get($star) + 1);
                                }
                            }
                        }
                    }
                }



                if ($filterType == 'review_score' && $request->has('review_score')) {
                    $selectedScores = $request->input('review_score', []);

                    $availableScores = DB::table('bravo_hotels')
                        ->whereIn('id', $filteredHotelIds)
                        ->select(DB::raw('FLOOR(review_score) as score'))
                        ->distinct()
                        ->pluck('score')
                        ->toArray();

                    $validScores = array_intersect($selectedScores, $availableScores);

                    if (!empty($validScores)) {


                        $where_review_score = [];
                        $params = [];

                        foreach ($validScores as $number) {
                            $number = intval($number);
                            if ($reviewScoreCounts->has($number)) {
                                $where_review_score[] = "(bravo_hotels.review_score >= ? AND bravo_hotels.review_score <= ?)";
                                $params[] = $number;
                                $params[] = $number . '.9';
                            }
                        }

                        if (!empty($where_review_score)) {
                            $sql_where_review_score = "(" . implode(" OR ", $where_review_score) . ")";
                            $AllHotelesQuery->whereRaw($sql_where_review_score, $params);
                        }

                        $filteredHotelIds = $AllHotelesQuery->pluck('id')->toArray();
                        $originalHotelIds = $originalQuery->pluck('id')->toArray();

                        // جلب التيرمز من الفنادق الأصلية للأتريبيوت من نوع slider
                        $sliderTermCounts = DB::table('bravo_hotel_term')
                            ->join('bravo_hotels', 'bravo_hotels.id', '=', 'bravo_hotel_term.target_id')
                            ->join('bravo_terms', 'bravo_terms.id', '=', 'bravo_hotel_term.term_id')
                            ->join('bravo_attrs', 'bravo_attrs.id', '=', 'bravo_terms.attr_id')
                            ->where('bravo_attrs.display_type', 'slider')
                            ->whereIn('bravo_hotel_term.target_id', $originalHotelIds)
                            ->where('bravo_hotels.status', 'publish')
                            ->groupBy('bravo_hotel_term.term_id')
                            ->select('bravo_hotel_term.term_id', DB::raw('COUNT(DISTINCT bravo_hotel_term.target_id) as hotel_count'))
                            ->pluck('hotel_count', 'bravo_hotel_term.term_id');

                        $nonSliderTermCounts  = DB::table('bravo_hotel_term')
                            ->join('bravo_hotels', 'bravo_hotels.id', '=', 'bravo_hotel_term.target_id')
                            ->join('bravo_terms', 'bravo_terms.id', '=', 'bravo_hotel_term.term_id')
                            ->join('bravo_attrs', 'bravo_attrs.id', '=', 'bravo_terms.attr_id')
                            ->where(function ($query) {
                                $query->whereNull('bravo_attrs.display_type') // display_type = null
                                    ->orWhere('bravo_attrs.display_type', '!=', 'slider'); // أو غير slider
                            })->whereIn('bravo_hotel_term.target_id', $filteredHotelIds)
                            ->where('bravo_hotels.status', 'publish')
                            ->groupBy('bravo_hotel_term.term_id')
                            ->select('bravo_hotel_term.term_id', DB::raw('COUNT(DISTINCT bravo_hotel_term.target_id) as hotel_count'))
                            ->pluck('hotel_count', 'bravo_hotel_term.term_id');



                        $term_counts = collect($sliderTermCounts)->union($nonSliderTermCounts);
                    }
                }
            }
        }






        if (!($request->has('attrs') && is_array($request->input('attrs')))) {
            $filteredHotelIds = $AllHotelesQuery->pluck('id')->toArray();
            $originalHotelIds = $originalQuery->pluck('id')->toArray();
            $attributeRanges = [];

            // جلب التيرمز من الفنادق الأصلية للأتريبيوت من نوع slider
            $sliderTermCounts = DB::table('bravo_hotel_term')
                ->join('bravo_hotels', 'bravo_hotels.id', '=', 'bravo_hotel_term.target_id')
                ->join('bravo_terms', 'bravo_terms.id', '=', 'bravo_hotel_term.term_id')
                ->join('bravo_attrs', 'bravo_attrs.id', '=', 'bravo_terms.attr_id')
                ->where('bravo_attrs.display_type', 'slider')
                ->whereIn('bravo_hotel_term.target_id', $originalHotelIds)
                ->where('bravo_hotels.status', 'publish')
                ->groupBy('bravo_hotel_term.term_id')
                ->select('bravo_hotel_term.term_id', DB::raw('COUNT(DISTINCT bravo_hotel_term.target_id) as hotel_count'))
                ->pluck('hotel_count', 'bravo_hotel_term.term_id');

            $nonSliderTermCounts  = DB::table('bravo_hotel_term')
                ->join('bravo_hotels', 'bravo_hotels.id', '=', 'bravo_hotel_term.target_id')
                ->join('bravo_terms', 'bravo_terms.id', '=', 'bravo_hotel_term.term_id')
                ->join('bravo_attrs', 'bravo_attrs.id', '=', 'bravo_terms.attr_id')
                ->where(function ($query) {
                    $query->whereNull('bravo_attrs.display_type') // display_type = null
                        ->orWhere('bravo_attrs.display_type', '!=', 'slider'); // أو غير slider
                })->whereIn('bravo_hotel_term.target_id', $filteredHotelIds)
                ->where('bravo_hotels.status', 'publish')
                ->groupBy('bravo_hotel_term.term_id')
                ->select('bravo_hotel_term.term_id', DB::raw('COUNT(DISTINCT bravo_hotel_term.target_id) as hotel_count'))
                ->pluck('hotel_count', 'bravo_hotel_term.term_id');



            $term_counts = collect($sliderTermCounts)->union($nonSliderTermCounts);

            $attributes = Attributes::where('service', 'hotel')
                ->orderBy('position', 'asc')
                ->with([
                    'terms' => function ($query) use ($filteredHotelIds) {
                        $query->whereHas('hotel', function ($q) use ($filteredHotelIds) {
                            $q->whereIn('bravo_hotels.id', $filteredHotelIds);
                        })
                            ->withCount(['hotel' => function ($q) use ($filteredHotelIds) {
                                $q->whereIn('bravo_hotels.id', $filteredHotelIds);
                            }])
                            ->orderBy('name', 'asc');
                    },
                    'translation'
                ])
                ->get();
        }

        if (!($request->has('review_score'))) {
            $HotelesQuery = $AllHotelesQuery->get();
            $reviewScoreCounts = collect([5 => 0, 4 => 0, 3 => 0, 2 => 0, 1 => 0, 0 => 0]);

            foreach ($HotelesQuery as $hotel) {
                if (!empty($hotel->review_score)) {
                    $star = floor($hotel->review_score);
                    if ($reviewScoreCounts->has($star)) {
                        $reviewScoreCounts->put($star, $reviewScoreCounts->get($star) + 1);
                    }
                }
            }
        }


        $allOriginalHotels = $originalQuery->get();
        $HotelesQuery = $AllHotelesQuery->get();

        $hotelStarCounts = collect(['unrated' => 0, 5 => 0, 4 => 0, 3 => 0, 2 => 0, 1 => 0]);

        foreach ($allOriginalHotels as $hotel) {
            if (!empty($hotel->star_rate) && $hotelStarCounts->has($hotel->star_rate)) {
                $hotelStarCounts->put($hotel->star_rate, $hotelStarCounts->get($hotel->star_rate) + 1);
            } else {
                $hotelStarCounts->put('unrated', $hotelStarCounts->get('unrated') + 1);
            }
        }








        $markers = [];
        if ($for_map && !empty($list)) {
            foreach ($list as $row) {
                $markers[] = [
                    "id"      => $row->id,
                    "title"   => $row->title,
                    "lat"     => (float)$row->map_lat,
                    "lng"     => (float)$row->map_lng,
                    "gallery" => $row->getGallery(true),
                    "infobox" => view('Hotel::frontend.layouts.search.loop-grid', [
                        'row' => $row,
                        'disable_lazyload' => 1,
                        'wrap_class' => 'infobox-item'
                    ])->render(),
                    'marker' => get_file_url(setting_item("hotel_icon_marker_map"), 'full') ?? url('images/icons/png/pin.png'),
                ];
            }
        }


        $locationsWithHotels = $this->locationClass::with(['children' => function ($query) {
            $query->where('status', 'publish')->whereHas('hotels', function ($subQuery) {
                $subQuery->where('status', 'publish');
            });
        }, 'children.hotels' => function ($query) {
            $query->where('status', 'publish');
        }])->where('status', 'publish')->whereNull('parent_id')->get();

        $listLocationWithHotels = [];
        foreach ($locationsWithHotels as $location) {
            $country = clone $location;
            $citiesWithHotels = [];

            foreach ($location->children as $city) {
                if ($city->hotels->isNotEmpty()) {
                    $citiesWithHotels[] = $city;
                }
            }

            if (!empty($citiesWithHotels)) {
                $country->cities = $citiesWithHotels;
                $listLocationWithHotels[] = $country;
            }
        }

        return $maxTermsPerAttribute;

        $allHotels = $AllHotelesQuery->get();
        $query = clone $AllHotelesQuery;
        $list = $query->paginate($limit);
        $data = [
            'rows' => $list,
            'layout' => $layout,
            'layout_item' => $layout_item,
            'list_location_hotel' => $listLocationWithHotels,
            'hotel_min_max_price' => $this->hotelClass::getMinMaxPrice(),
            'markers' => $markers,
            "blank" => setting_item('search_open_tab') == "current_tab" ? 0 : 1,
            "seo_meta" => $this->hotelClass::getSeoMetaForPageList(),
            'allHotels' => $allHotels,
            'hotelStarCounts' => $hotelStarCounts,
            'reviewScoreCounts' => $reviewScoreCounts,
            'attributes' => $attributes,
            'attributeRanges' => $attributeRanges,
            'term_counts' => $term_counts
        ];


        if ($is_ajax) {
            return response()->json([
                "markers" => $markers,
                'fragments' => [
                    '.ajax-search-result' => view('Hotel::frontend.ajax.search-result' . ($for_map ? '-map' : ''), $data)->render(),
                    '.ajax-filter-search' => view('Hotel::frontend.ajax.filter-search', $data)->render(),
                    '.ajax-star-filter' => view('Hotel::frontend.ajax.star-filter', $data)->render(),
                    '.ajax-review-score-filter' => view('Hotel::frontend.ajax.review-score-filter', $data)->render(),
                    '.ajax-term-filter' => view('Hotel::frontend.ajax.term-filter', $data)->render(),

                    '.result-count' => $list->total() > 1 ? __(":count hotels found", ['count' => $list->total()]) : __(":count hotel found", ['count' => $list->total()]),
                    '.count-string' => $list->total() ? __("Showing :from - :to of :total Hotels", [
                        "from" => $list->firstItem(),
                        "to" => $list->lastItem(),
                        "total" => $list->total()
                    ]) : '',

                ]
            ]);
        }

        if ($layout == "map") {
            $data['body_class'] = 'has-search-map';
            $data['html_class'] = 'full-page';
            return view('Hotel::frontend.search-map', $data);
        }
        return view('Hotel::frontend.search', $data);
    }









    public function detail(Request $request, $slug)
    {
        $row = $this->hotelClass::where('slug', $slug)->with(['location', 'translation', 'hasWishList'])->first();;
        if (empty($row) or !$row->hasPermissionDetailView()) {
            return redirect('/');
        }
        $translation = $row->translate();
        $relatedQuery = $row->getRelated();
        $hotel_related = $relatedQuery ? $relatedQuery->take(4)->get() : [];
        $review_list = $row->getReviewList();
        $data = [
            'row'          => $row,
            'translation'       => $translation,
            'hotel_related' => $hotel_related,
            'location_category' => $this->locationCategoryClass::where("status", "publish")->with('location_category_translations')->get(),
            'booking_data' => $row->getBookingData(),
            'review_list'  => $review_list,
            'seo_meta'  => $row->getSeoMetaWithTranslation(app()->getLocale(), $translation),
            'body_class' => 'is_single',
            'breadcrumbs'       => [
                [
                    'name'  => __('Hotel'),
                    'url'  => route('hotel.search'),
                ],
            ],
        ];
        $data['breadcrumbs'] = array_merge($data['breadcrumbs'], $row->locationBreadcrumbs());
        $data['breadcrumbs'][] = [
            'name'  => $translation->title,
            'class' => 'active'
        ];

        $this->setActiveMenu($row);
        return view('Hotel::frontend.detail', $data);
    }

    public function checkAvailability()
    {
        $hotel_id = \request('hotel_id');
        if (\request()->input('firstLoad') == "false") {
            $rules = [
                'hotel_id'   => 'required',
                'start_date' => 'required:date_format:Y-m-d',
                'end_date'   => 'required:date_format:Y-m-d',
                'adults'     => 'required',
            ];
            $validator = \Validator::make(request()->all(), $rules);
            if ($validator->fails()) {
                return $this->sendError($validator->errors()->all());
            }

            if (strtotime(\request('end_date')) - strtotime(\request('start_date')) < DAY_IN_SECONDS) {
                return $this->sendError(__("Dates are not valid"));
            }
            if (strtotime(\request('end_date')) - strtotime(\request('start_date')) > 30 * DAY_IN_SECONDS) {
                return $this->sendError(__("Maximum day for booking is 30"));
            }
        }

        $hotel = $this->hotelClass::find($hotel_id);
        if (empty($hotel_id) or empty($hotel)) {
            return $this->sendError(__("Hotel not found"));
        }

        if (\request()->input('firstLoad') == "false") {
            $numberDays = abs(strtotime(\request('end_date')) - strtotime(\request('start_date'))) / 86400;
            if (!empty($hotel->min_day_stays) and  $numberDays < $hotel->min_day_stays) {
                return $this->sendError(__("You must to book a minimum of :number days", ['number' => $hotel->min_day_stays]));
            }

            if (!empty($hotel->min_day_before_booking)) {
                $minday_before = strtotime("today +" . $hotel->min_day_before_booking . " days");
                if (strtotime(\request('start_date')) < $minday_before) {
                    return $this->sendError(__("You must book the service for :number days in advance", ["number" => $hotel->min_day_before_booking]));
                }
            }
        }

        $rooms = $hotel->getRoomsAvailability(request()->input());

        return $this->sendSuccess([
            'rooms' => $rooms
        ]);
    }
}
